package Component::DBI;
use utf8;
use strict;
use warnings;
use Config::Tiny;
use Storable qw(freeze thaw);
use DBI;
use Data::Dumper;

use Exporter qw(import);

our @EXPORT = qw( cve_add cve_get cve_search cve_getStorage cve_setStorage cve_setStatus cve_setChannelByID cve_getCVEByChannel cve_getStatus getStorage setStorage );

my $config = Config::Tiny->read('config.ini', 'utf8');


sub new {
    my $class = shift;
    my $self  = {};
    my %attr  = ( PrintError => 0, RaiseError => 1 );
    
    $self->{'dsn'} = sprintf "DBI:MariaDB:database=%s;host=%s", $config->{'cvebot'}{'dbname'}, $config->{'cvebot'}{'dbhost'};
    $self->{'dbh'} = DBI->connect($self->{'dsn'}, $config->{'cvebot'}{'dbuser'}, $config->{'cvebot'}{'dbpass'}, \%attr) or die $!;

    bless ($self, $class);

    return $self;
}


sub cve_get {
    my ($self, $id) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "SELECT * FROM cve WHERE id = ?";
    my $sth = $dbh->prepare($sql);

    $sth->execute($id);
    return $sth->fetchrow_hashref();
} 


sub cve_add {
    my ($self, $id, $desc, $link, $status, $storage) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "INSERT INTO cve VALUES (?, ?, ?, ?, NULL, ?)";
    my $sth = $dbh->prepare($sql);

    $sth->execute($id, $desc, $link, $status, freeze($storage));
}


sub cve_getStorage {
    my ($self, $id) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "SELECT storage FROM cve WHERE id = ?";
    my $sth = $dbh->prepare($sql);
    $sth->execute($id);

    my $thaw = thaw($sth->fetchrow_array());

    return $thaw;
}


sub cve_setStorage {
    my ($self, $id, $data) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "UPDATE cve SET storage = ? WHERE id = ?";
    my $sth = $dbh->prepare($sql);

    $sth->execute(freeze($data), $id) 
}


sub cve_getStatus {
    my ($self, $status) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "SELECT * FROM cve WHERE status = ?";
    my $sth = $dbh->prepare($sql);

    $sth->execute($status);
    my @search;
    while (my $row = $sth->fetchrow_hashref()) {
        push @search, $row;
    }

    return @search;
}


sub cve_setStatus {
    my ($self, $id, $status) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "UPDATE cve SET status = ? WHERE id = ?";
    my $sth = $dbh->prepare($sql);

    $sth->execute($status, $id) 
}


sub cve_setChannelByID {
    my ($self, $id, $channel) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "UPDATE cve SET channel = ? WHERE id = ?";
    my $sth = $dbh->prepare($sql);

    $sth->execute($channel, $id) 
}


sub cve_getCVEByChannel {
    my ($self, $channel) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "SELECT id FROM cve WHERE channel = ? AND status = 'open' OR status = 'mitigated' OR status = 'remediated'";
    my $sth = $dbh->prepare($sql);
    $sth->execute($channel);

    return $sth->fetchrow_array();
}


sub cve_search {
    my ($self, $search) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "SELECT * FROM cve";
    my $sth = $dbh->prepare($sql);

    $sth->execute();
    my @search;
    while (my $row = $sth->fetchrow_hashref()) {
        my @string = split /\s+/, $search;
        my $i = 0;

        for (@string) {
            s/[^\w\-]//g; # Sanitize mkthx
            ++$i if $row->{'desc'} =~ /$_/i
        }
        
        if (scalar @string == $i) {
            push @search, $row;
        }
    }

    return @search;
} 


sub getStorage {
    my ($self) = @_;
    my $storage = cve_get($self, 'storage');

    if ($storage) {
        return thaw $storage->{'storage'};

    } else {
        $self->cve_add('storage', 'storage', 'storage', 'storage', {});

        return {};
    }
} 


sub setStorage {
    my ($self, $data) = @_;
    my $dbh = $self->{'dbh'};

    my $sql = "UPDATE cve SET storage = ? WHERE id = 'storage'";
    my $sth = $dbh->prepare($sql);

    $sth->execute(freeze($data));

}

1;
