package Component::DBI;
use strict;
use warnings;
use Config::Tiny;
use Storable qw(freeze thaw);
use DBI;

use Exporter qw(import);

our @EXPORT = qw( get set );

my %attr = ( PrintError => 0, RaiseError => 1 );
my ($logf, $dsn, $dbh);

sub new {
    my ($class, %args) = @_;
    my $config = Config::Tiny->read('config.ini', 'utf8');
    
    $dsn = "DBI:MariaDB:$config->{database}{database}";
    $dbh = DBI->connect($dsn, $config->{database}{username}, $config->{database}{password}, \%attr) or die $!;

    return bless \%args, $class;
}

sub get {
    my ($self, $key) = @_;

    if (ifExist($self, $key)) {
        my $sql = "SELECT data FROM storage WHERE name = ?";
        my $sth = $dbh->prepare($sql);
        $sth->execute($key);
        my $thaw = thaw($sth->fetchrow_array());

        return $thaw;
    } else {
        return undef;
    }
} 

sub set {
    my ($self, $key, $data) = @_;

    # Check to see if storage key exists first.
    if (ifExist($self, $key)) {
        my $sql = "UPDATE storage SET data = ? WHERE name = ?";
        my $sth = $dbh->prepare($sql);

        return $sth->execute(freeze($data), $key) ? 1 : undef;
    } else {
        my $sql = "INSERT INTO storage (name, data) VALUES(?, ?)";
        my $sth = $dbh->prepare($sql);

        return $sth->execute($key, freeze($data)) ? 1 : undef;
    }
}

sub ifExist {
    my ($self, $key) = @_;
    my $sql = "SELECT data FROM bobbot.storage WHERE name = ?";
    my $sth = $dbh->prepare($sql);
    $sth->execute($key);

    return $sth->fetchrow_array() ? 1 : undef;
}

sub dbh { return $dbh; }

1;
