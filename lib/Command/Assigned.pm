package Command::Assigned;
use feature 'say';
use utf8;

use Moo;
use strictures 2;
use Component::DBI;

use Exporter qw(import);
our @EXPORT_OK = qw(cmd_assigned);

has bot                 => ( is => 'ro' );
has discord             => ( is => 'lazy', builder => sub { shift->bot->discord } );
has log                 => ( is => 'lazy', builder => sub { shift->bot->log } );
has name                => ( is => 'ro', default => 'Assigned' );
has access              => ( is => 'ro', default => 0 );
has description         => ( is => 'ro', default => 'See who the CVE is assigned to.' );
has pattern             => ( is => 'ro', default => '^assigned ?' );
has function            => ( is => 'ro', default => sub { \&cmd_assigned } );
has usage               => ( is => 'ro', default => '' );


sub cmd_assigned {
    my ($self, $msg) = @_;

    my $discord = $self->discord;
    my $pattern = $self->pattern;
    my $channel = $msg->{'channel_id'};
    my $args    = $msg->{'content'};
       $args    =~ s/$pattern//i;

    my @mentions = @{ $msg->{'mentions'} };

    my $db = Component::DBI->new();
    my $cve = $db->cve_getCVEByChannel($channel);

    if (!$cve) {
        $discord->send_message($channel, "This command can only be used in a CVE 'open' channel.");
        return;
    }

    my %storage = %{ $db->cve_getStorage($cve) };
    my @assigned = $storage{'assign'} ? @{ $storage{'assign'} } : ();

    $discord->send_message($channel,
        @assigned ?
            "This CVE has been assigned to: " . join (' ', map { "<\@$_->{id}>" } @assigned)
            :
            "This CVE has not been assigned to anyone."
    );

}

1;
