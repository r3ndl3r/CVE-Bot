package Command::Feed;

use feature 'say';
use utf8;
use Moo;
use strictures 2;
use namespace::clean;
use LWP::UserAgent;
use Component::DBI;
use POSIX qw(strftime);
use XML::Simple;
use HTML::Entities;
use Data::Dumper;

use Exporter qw(import);
our @EXPORT_OK = qw(cmd_feed);

my $config = Config::Tiny->read('config.ini', 'utf8');

has bot                 => ( is => 'ro' );
has discord             => ( is => 'lazy', builder => sub { shift->bot->discord } );
has log                 => ( is => 'lazy', builder => sub { shift->bot->log } );

has name                => ( is => 'ro', default => 'Feed' );
has access              => ( is => 'ro', default => 0 );
has description         => ( is => 'ro', default => 'Downloads feeds, does stuff' );
has pattern             => ( is => 'ro', default => '^feed ?' );
has function            => ( is => 'ro', default => sub { \&cmd_feed } );
has usage               => ( is => 'ro', default => "Usage: !feed" );
has timer_seconds       => ( is => 'ro', default => $config->{'cvebot'}{'feedupdate'} );

has timer_sub           => ( is => 'ro',    default => sub 
    { 
        my $self = shift;
        Mojo::IOLoop->recurring($self->timer_seconds => sub {$self->up_feed; }
        ) 
    }
);


sub cmd_feed {
    my ($self, $msg) = @_;

    my $discord = $self->discord;

    my $channel = $msg->{'channel_id'};
    my $author  = $msg->{'author'};
    my $pattern = $self->pattern;
    my $args    = $msg->{'content'};
    $args       =~ s/$pattern//i;
    my $replyto = '<@' . $author->{'id'} . '>';

    if ($args =~ /^update$/) {
        $discord->send_message($channel, "$replyto updating CVE feed.");
        up_feed($self);
    }

    my $db = Component::DBI->new($self);
}

sub up_feed {
    my $self    = shift;
    my $discord = $self->discord;
    my $db = Component::DBI->new();

    my $res = LWP::UserAgent->new->get($config->{'cvebot'}{'feedurl'});
    my $xml = XMLin($res->content);

    for my $item (@{ $xml->{item} }) {
        my ($id, $desc, $link, $date) = ($item->{'title'}, $item->{'description'}, $item->{'link'}, $item->{'dc:date'});
           $id =~ s/^CVE-//;

        if ( ! $db->cve_get($id) ) {
            $db->cve_add($id, decode_entities($desc), $link, 'unmatched',
                {
                    date => $date,
                }
            );

            my $ourDate = strftime("%a %b %d %H:%M:%S %Y", localtime);
            $discord->send_message($config->{'cvebot'}{'cve-feed'}, "CVE $id - $ourDate\n$desc\n$link\n");
        } else {
            
        }
    }


}

1;
