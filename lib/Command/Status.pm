package Command::Status;
use feature 'say';
use utf8;

use Moo;
use strictures 2;
use Component::DBI;
use Storable qw(thaw);

use Exporter qw(import);
our @EXPORT_OK = qw(cmd_status);

has bot                 => ( is => 'ro' );
has discord             => ( is => 'lazy', builder => sub { shift->bot->discord } );
has log                 => ( is => 'lazy', builder => sub { shift->bot->log } );
has name                => ( is => 'ro', default => 'Status' );
has access              => ( is => 'ro', default => 0 );
has description         => ( is => 'ro', default => 'Displays specified CVE matching the status' );
has pattern             => ( is => 'ro', default => '^status ?' );
has function            => ( is => 'ro', default => sub { \&cmd_status } );
has usage               => ( is => 'ro', default => '' );

sub cmd_status {
    my ($self, $msg) = @_;

    my $channel = $msg->{'channel_id'};
    my $author = $msg->{'author'};
    my $args = $msg->{'content'};

    my $pattern = $self->pattern;
    $args =~ s/$pattern//i;

    my $discord = $self->discord;
    my $replyto = '<@' . $author->{'id'} . '>';
    
    my $status;
    if ($args =~ /^o(pen)?$/i) {
        $status = "open";
    } elsif ($args =~ /^mit(igated)?$/i) {
        $status = "mitigated";
    } elsif ($args =~ /^rem(ediated)?$/i) {
        $status = "remediated";
    } else {
        $discord->send_message($channel, "open / mitigated / remediated - ONLY");
    }

    my $db  = Component::DBI->new();
    my @cve = $db->cve_getStatus($status);

    my @msg;

    for my $cve (@cve) {
        my $storage  = thaw $cve->{'storage'};
        my @assigned = $storage->{'assign'} ? @{ $storage->{'assign'} } : ();

        push @msg, "CVE-$cve->{'id'}\n$cve->{'desc'}\n" . ( 
            @assigned ?
                "This CVE has been assigned to: " . join (' ', map { "<\@$_->{id}>" } @assigned)
                :
                "This CVE has not been assigned to anyone."
            );
    }

    $discord->send_message($channel, join "\n\n", @msg);

}

1;
