package Command::Report;
use feature 'say';
use utf8;

use Moo;
use strictures 2;

use Exporter qw(import);
our @EXPORT_OK = qw(cmd_report);

has bot                 => ( is => 'ro' );
has discord             => ( is => 'lazy', builder => sub { shift->bot->discord } );
has log                 => ( is => 'lazy', builder => sub { shift->bot->log } );
has name                => ( is => 'ro', default => 'Report' );
has access              => ( is => 'ro', default => 0 );
has description         => ( is => 'ro', default => 'Report' );
has pattern             => ( is => 'ro', default => '^report ?' );
has function            => ( is => 'ro', default => sub { \&cmd_report } );
has usage               => ( is => 'ro', default => '' );

sub cmd_report {
    my ($self, $msg) = @_;

    my $channel = $msg->{'channel_id'};
    my $author = $msg->{'author'};
    my $args = $msg->{'content'};

    my $pattern = $self->pattern;
    $args =~ s/$pattern//i;

    my $discord = $self->discord;
    my $replyto = '<@' . $author->{'id'} . '>';

    my $db  = Component::DBI->new();
    my $cid = $db->cve_getCVEByChannel($channel);
    my $cve = $db->cve_get($cid);

    if ($args && $cve) {
        my ($fh, $content);
        open $fh, "< :encoding(UTF-8)", "report/word/document.xml.orig" or die "can't open report/word/document.xml.orig: $!";
        $content = do { local $/; <$fh> };
        close $fh or die "can't close report/word/document.xml.orig: $!";
        
        my $date = POSIX::strftime("%a %b %d %H:%M:%S %Y", localtime);
        $content =~ s/CVE-ID/$cve->{'id'}/;
        $content =~ s/CVE-DATE/$date/;
        $content =~ s/CVE-CHANNEL/$channel/;
        $content =~ s/CVE-DESC/$cve->{'desc'}/;
        $content =~ s/CVE-REPORT/$args/;

        open $fh, "> :encoding(UTF-8)", "report/word/document.xml" or die "can't open report/word/document.xml: $!";
        print $fh $content;
        close $fh;

        eval {
            chdir "$ENV{HOME}/CVE-Bot/report";
            system "zip -r report.docx _rels/.rels docProps/app.xml docProps/core.xml word/webSettings.xml word/_rels/document.xml.rels word/styles.xml word/settings.xml word/theme/theme1.xml word/document.xml word/fontTable.xml \[Content_Types\].xml";
            chdir "$ENV{HOME}/CVE-Bot/";
        };

        Mojo::IOLoop->timer( 2 =>
            sub {

                my $file = "report/report.docx";
                if (! -f $file ) {
                    die "$file doesn't exist.\n";
                };

                $discord->send_file($channel, 
                    {
                        content => "Report form for: CVE-$cid",
                        type    => "docx",
                        path    => "$file",
                        name    => "Report_CVE-$cid.docx",
                    }
                );
            }
        );                    
    }        
}

1;
