package Command::Assign;
use feature 'say';
use utf8;

use Moo;
use strictures 2;
use Component::DBI;

use Exporter qw(import);
our @EXPORT_OK = qw(cmd_assign);

has bot                 => ( is => 'ro' );
has discord             => ( is => 'lazy', builder => sub { shift->bot->discord } );
has log                 => ( is => 'lazy', builder => sub { shift->bot->log } );
has name                => ( is => 'ro', default => 'Voice' );
has access              => ( is => 'ro', default => 0 );
has description         => ( is => 'ro', default => 'Assigns CVE to people.' );
has pattern             => ( is => 'ro', default => '^assign ?' );
has function            => ( is => 'ro', default => sub { \&cmd_assign } );
has usage               => ( is => 'ro', default => '' );


sub cmd_assign {
    my ($self, $msg) = @_;

    my $channel = $msg->{'channel_id'};
    my $author = $msg->{'author'};
    my $args = $msg->{'content'};

    my $pattern = $self->pattern;
    $args =~ s/$pattern//i;

    my $discord = $self->discord;
    my @mentions = @{ $msg->{'mentions'} };

    my $db = Component::DBI->new();

    my $cve = $db->cve_getCVEByChannel($channel);

    if ($cve && @mentions) {
        my @assigned = map { "<\@$_->{id}>" } @mentions;

        $discord->set_topic($channel, "#CVE-$cve - assigned to: " . join (' ', @assigned));
        
        $discord->send_message($channel, "This CVE has been assigned to: " . join (' ', @assigned) . "\nGood luck!");
        
        my %storage = %{ $db->cve_getStorage($cve) };
        $storage{'assign'} = \@mentions;
        $db->cve_setStorage($cve, \%storage);


    } elsif ($cve && !@mentions) {
         $discord->send_message($channel, "Please specify some people to assign this to.");
    } else {
        $discord->send_message($channel, "This command can only be used in a CVE 'open' channel.");
    }
}

1;
