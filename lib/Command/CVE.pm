package Command::CVE;
use feature 'say';
use utf8;

use Moo;
use strictures 2;
use Mojo::JSON qw(decode_json);
use namespace::clean;
use Component::DBI;
use Data::Dumper;

use Exporter qw(import);
our @EXPORT_OK = qw(cmd_cve);

has bot                 => ( is => 'ro' );
has discord             => ( is => 'lazy', builder => sub { shift->bot->discord } );
has log                 => ( is => 'lazy', builder => sub { shift->bot->log } );
has name                => ( is => 'ro', default => 'CVE' );
has access              => ( is => 'ro', default => 0 );
has description         => ( is => 'ro', default => '' );
has pattern             => ( is => 'ro', default => '^cve ?' );
has function            => ( is => 'ro', default => sub { \&cmd_cve } );
has usage               => ( is => 'ro', default => '' );

sub cmd_cve {
    my ($self, $msg) = @_;

    my $config = $self->{'bot'}{'config'}{'cvebot'};

    my $db = Component::DBI->new();
    my $channel = $msg->{'channel_id'};
    my $author = $msg->{'author'};
    my $args = $msg->{'content'};

    my $pattern = $self->pattern;
    $args =~ s/$pattern//i;

    my $discord = $self->discord;
    my $replyto = '<@' . $author->{'id'} . '>';

    my $id;

    if ($args =~ /^search ([\w\s\-\.]+)/i) {
        my $search = $1;
        my @result;
        
        my @search = $db->cve_search($search);

        if (@search) {
            push @result, sprintf "Found " . (scalar @search) . " match%s:\n\n", scalar @search > 1 ? "es" : "";

            for (@search) {
                push @result, "$_->{id} - $_->{desc}\n\n";
            } 

            #print join ('', @result);
            $discord->send_message($channel, join ('', @result));
        } else {
            $discord->send_message($channel, "Search for '$search' did not find anything.");
        }


    } elsif (($id) = $args =~ /^show ([\d+\-]+)$/) {
        my $cve = $db->cve_get($id);

        if (defined $cve) {
            $discord->send_message($channel, "CVE-$cve->{id} - STATUS [ $cve->{status} ]\n$cve->{desc}\n$cve->{link}");

        } else {
            $discord->send_message($channel, "CVE-$id does not exist.");
        }


    } elsif (($id) = $args =~ /^open ([\d\-]+)$/) {
        my $cve = $db->cve_get($id);
        
        if (defined $cve) {
            if ($cve->{status} ne 'open') {
                my %storage = %{ $db->cve_getStorage($id) };
                
                $discord->create_text_channel($config->{'server'}, $config->{'open'}, $id, "CVE-$id", sub {
                        my $cid = shift->{id};

                        $storage{'channe'} = $cid;
                        $db->cve_setStorage($id, \%storage);
            
                        $discord->send_message($channel, "Channel created for CVE-$id: (ID:$cid)");            
                    }
                );
            }
        } else {
            $discord->send_message($channel, "A CVE with that ID does not exist.");
        }
    }
}

1;
