package Command::CVE;
use feature 'say';
use utf8;

use Moo;
use strictures 2;
use namespace::clean;
use Component::DBI;

use Exporter qw(import);
our @EXPORT_OK = qw(cmd_cve);

has bot                 => ( is => 'ro' );
has discord             => ( is => 'lazy', builder => sub { shift->bot->discord } );
has log                 => ( is => 'lazy', builder => sub { shift->bot->log } );
has name                => ( is => 'ro', default => 'CVE' );
has access              => ( is => 'ro', default => 0 );
has description         => ( is => 'ro', default => '' );
has pattern             => ( is => 'ro', default => '^cve ?' );
has function            => ( is => 'ro', default => sub { \&cmd_cve } );
has usage               => ( is => 'ro', default => '' );

sub cmd_cve {
    my ($self, $msg) = @_;

    my $config = $self->{'bot'}{'config'}{'cvebot'};

    my $discord = $self->discord;
    my $channel = $msg->{'channel_id'};
    my $pattern = $self->pattern;
    my $args    = $msg->{'content'};
       $args    =~ s/$pattern//i;

    my $db      = Component::DBI->new();

    if (my ($id) = $args =~ /^o(?:pen)? ([\d\-]+)$/i) {
        my $cve = $db->cve_get($id);

        if (!$cve) {
            $discord->send_message($channel, "A CVE with that ID does not exist.");
            return
        }

        my %storage = %{ $db->cve_getStorage($id) };
        
        $discord->create_text_channel($config->{'server'}, $config->{'open'}, $id, "CVE-$id",
            sub {
                my $cid = shift->{id};

                $storage{'channel'} = $cid;
                $db->cve_setStorage($id, \%storage);
                $db->cve_setStatus($id, 'open');
                $db->cve_setChannelByID($id, $cid);
    
                $discord->send_message($channel, "Channel created for CVE-$id: (ID:$cid)\nSTATUS set to [ open ]");         

                my $cve = $db->cve_get($id);
                $discord->send_message($cid, "CVE-$cve->{'id'} - STATUS [ $cve->{'status'} ]\n$cve->{'desc'}\n$cve->{'link'}");


                my ($fh, $content);
                open $fh, "< :encoding(UTF-8)", "report/word/document.xml.orig" or die "can't open report/word/document.xml.orig: $!";
                $content = do { local $/; <$fh> };
                close $fh or die "can't close report/word/document.xml.orig: $!";
                
                my $date = POSIX::strftime("%a %b %d %H:%M:%S %Y", localtime);
                $content =~ s/CVE-ID/$cve->{'id'}/;
                $content =~ s/CVE-DATE/$date/;
                $content =~ s/CVE-CHANNEL/$cid/;
                $content =~ s/CVE-DESC/$cve->{'desc'}/;

                open $fh, "> :encoding(UTF-8)", "report/word/document.xml" or die "can't open report/word/document.xml: $!";
                print $fh $content;
                close $fh;

                eval {
                    chdir "$ENV{HOME}/CVE-Bot/report";
                    system "zip -r report.docx _rels/.rels docProps/app.xml docProps/core.xml word/webSettings.xml word/_rels/document.xml.rels word/styles.xml word/settings.xml word/theme/theme1.xml word/document.xml word/fontTable.xml \[Content_Types\].xml";
                    chdir "$ENV{HOME}/CVE-Bot/";
                };

                Mojo::IOLoop->timer( 2 =>
                    sub {

                        my $file = "report/report.docx";
                        if (! -f $file ) {
                            die "$file doesn't exist.\n";
                        };

                        $discord->send_file($cid, 
                            {
                                content => "Report form for: CVE-$id",
                                type    => "docx",
                                path    => "$file",
                                name    => "Report_CVE-$id.docx",
                            }
                        );
                    }
                );                    
            }
        );
    }


    if ($args =~ /^(?:rem(?:ediated)?)$/i) {    
        my $cve = $db->cve_getCVEByChannel($channel);
        
        if ($cve) {
            my %storage = %{ $db->cve_getStorage($cve) };

            $discord->move_channel_category($storage{'channel'}, $config->{'remediated'});
            $discord->send_message($channel, "Moved 'CVE-$cve' to 'remediated'.");

            $db->cve_setStatus($cve, "remediated");
        } else {
            $discord->send_message($channel, "This command can only be used in a CVE 'open' channel.");
        }
    }


    if ($args =~ /^(?:mit(?:igated)?)$/i) {
        my $cve = $db->cve_getCVEByChannel($channel);
        
        if ($cve) {
            my %storage = %{ $db->cve_getStorage($cve) };
            $discord->move_channel_category($storage{'channel'}, $config->{'mitigated'});
            $discord->send_message($channel, "Moved 'CVE-$cve' to 'mitigated'.");

            $db->cve_setStatus($cve, "mitigated");
        } else {
            $discord->send_message($channel, "This command can only be used in a CVE 'open' channel.");
        }

    }
                                    
}

1;
