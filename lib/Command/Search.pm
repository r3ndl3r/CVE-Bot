package Command::Search;
use feature 'say';
use utf8;

use Moo;
use strictures 2;
use Component::DBI;

use Exporter qw(import);
our @EXPORT_OK = qw(cmd_search);

has bot                 => ( is => 'ro' );
has discord             => ( is => 'lazy', builder => sub { shift->bot->discord } );
has log                 => ( is => 'lazy', builder => sub { shift->bot->log } );
has name                => ( is => 'ro', default => 'Search' );
has access              => ( is => 'ro', default => 0 );
has description         => ( is => 'ro', default => 'Search CVEs' );
has pattern             => ( is => 'ro', default => '^search ?' );
has function            => ( is => 'ro', default => sub { \&cmd_search } );
has usage               => ( is => 'ro', default => '' );


sub cmd_search {
    my ($self, $msg) = @_;

    my $channel = $msg->{'channel_id'};
    my $author = $msg->{'author'};
    my $args = $msg->{'content'};

    my $pattern = $self->pattern;
    $args =~ s/$pattern//i;

    my $discord = $self->discord;
    my $replyto = '<@' . $author->{'id'} . '>';

    my $search = $1;
    my @result;
    
    my $db     = Component::DBI->new();
    my @search = $db->cve_search($args);

    if (@search) {
        push @result, sprintf "Found " . (scalar @search) . " match%s:\n\n", scalar @search > 1 ? "es" : "";

        for (@search) {
            push @result, "$_->{id} - $_->{desc}\n\n";
        } 

        @search = sort {$b cmp $a} @search;

        if (scalar @result > 10) {
            splice(@result, 4);
            push @result, "Limiting to first 3.";
        }
        
        $discord->send_message($channel, join ('', @result));
    } else {
        $discord->send_message($channel, "Search for '$search' did not find anything.");
    }
}

1;
